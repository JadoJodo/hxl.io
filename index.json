[{"content":"","date":"August 26 2024","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"August 26 2024","externalUrl":null,"permalink":"/tags/fixes/","section":"Tags","summary":"","title":"Fixes","type":"tags"},{"content":"","date":"August 26 2024","externalUrl":null,"permalink":"/tags/go/","section":"Tags","summary":"","title":"Go","type":"tags"},{"content":"","date":"August 26 2024","externalUrl":null,"permalink":"/","section":"HXL","summary":"","title":"HXL","type":"page"},{"content":"","date":"August 26 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"August 26 2024","externalUrl":null,"permalink":"/categories/posts/","section":"Categories","summary":"","title":"Posts","type":"categories"},{"content":"","date":"August 26 2024","externalUrl":null,"permalink":"/tags/programming/","section":"Tags","summary":"","title":"Programming","type":"tags"},{"content":"Need the solution without the story? I gotchu ðŸ‘Š\nIntroduction # Go is a popular progamming language known for it\u0026rsquo;s simplicity and broad ecosystem. It is also the language that I am using for Project X. Development has gone well thus far and I am enjoying writing in it. There are many features of the language that make development life much easier and really speed up work.\nAir # There are also a number of tools in the Go ecosystem that make it even easier. One of those tools is called Air1. Air is a hot-reloading library that monitors the local filesystem for changes, and then runs a set a commands when it detects those changes. For example, you could execute a test run or kick off a Typescript build. Air includes support for both pre and post-change hooks which makes it very powerful.\nIn my project, I quickly grew tired of the constant CTRL + C â†’ go run cmd/main.go and so I added the Air library to my (development) toolbox.\nTempl # Another library that I found very useful is called Templ2. Templ is a templating engine similar to Laravel\u0026rsquo;s Blade3 library. Here is a sample Templ component:\n// card.templ package components templ Card (card CardData) { \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;{ card.Title }\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;{ card.Description }\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; } type CardData struct { Title string Description string } When you run templ generate, this Templ file gets processed and a new file is created next to the Templ file. This is what that file looks like:\n// card_templ.go // Code generated by templ - DO NOT EDIT. // templ: version: v0.2.747 package components //lint:file-ignore SA4006 This context is only used if a nested component is present. import \u0026#34;github.com/a-h/templ\u0026#34; import templruntime \u0026#34;github.com/a-h/templ/runtime\u0026#34; func Card(card CardData) templ.Component { return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) { templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, ... }) } type CardData struct { Title string Description string } As you can see, this file uses a lot of generated variables and is regenerated each time the templ generate command is run. To make my life easier, I added the templ generate command to the pre_cmd setting in Air:\n# .air.toml [build] ... cmd = \u0026#34;go build -o ./tmp/main ./cmd/main.go\u0026#34; ... pre_cmd = [ \u0026#34;templ generate\u0026#34; ] ... Understanding the Problem # One of the issues that I ran into fairly quickly when using these two tools together was an infinite loop: Air would detect a change in card.templ, trigger the templ generate call, which would in turn generate a card_templ.go file. Air would detect a change in this new file, which would trigger the templ generate call, which in turn would regenerate a new card_templ.go file. Round and round it went.\nYou can see it play out here:\nbuilding... running... Successfully connected and migrated the database! 2024/08/25 20:48:19 Starting server on :8080 components/card.templ has changed \u0026gt; templ generate (âœ“) Complete [ updates=3 duration=20.501708ms ] building... running... Successfully connected and migrated the database! 2024/08/25 20:48:20 Starting server on :8080 components/card_templ.go has changed \u0026gt; templ generate (âœ“) Complete [ updates=3 duration=21.856708ms ] building... running... Successfully connected and migrated the database! 2024/08/25 20:48:21 Starting server on :8080 components/card_templ.go has changed \u0026gt; templ generate ... Workarounds and Solutions # I ended up searching online for others experiencing this issue. I didn\u0026rsquo;t find anyone documenting the exact issue, but I was able to find others using both Air and Templ. I quickly noticed two (2) settings in the Air config that looked promising:\n# .air.toml [build] ... exclude_file = [ ] exclude_regex = [\u0026#34;_test.go\u0026#34;] I first tried to add a wildcard to the exclude_file array, but this didn\u0026rsquo;t work.\nexclude_file = [ \u0026quot;components/**/*_templ.go\u0026quot; ]\nI then found this article by @adrianhesketh4 who pointed out that the exclude_regex option is the one I needed. I updated my Air file to include the setting for the templ.go files:\n# .air.toml [build] ... exclude_regex = [\u0026#34;_test.go\u0026#34;, \u0026#34;.*_templ.go\u0026#34;] Success!\nConclusion # While this didn\u0026rsquo;t end up being a terribly complicated issue, I didn\u0026rsquo;t find it obvious that this would happen when I started using these two libraries together. Now I know (and you do, too!)\nReferences # https://github.com/a-h/templ\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/air-verse/air\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://laravel.com/docs/11.x/blade\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://adrianhesketh.com/2021/05/28/templ-hot-reload-with-air/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"August 26 2024","externalUrl":null,"permalink":"/posts/2024/08/solving-infinite-reloads-using-air-and-templ/","section":"Posts","summary":"Need the solution without the story?","title":"Solving Infinite Reloads Using Air and Templ","type":"posts"},{"content":"","date":"August 26 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"February 15 2024","externalUrl":null,"permalink":"/tags/google/","section":"Tags","summary":"","title":"Google","type":"tags"},{"content":"","date":"February 15 2024","externalUrl":null,"permalink":"/tags/llms/","section":"Tags","summary":"","title":"LLMs","type":"tags"},{"content":"There\u0026rsquo;s a weird edge case to using Large Language Models (LLMs) trained by humans that I\u0026rsquo;ve seen come up in Google\u0026rsquo;s reCAPTCHA: Sometimes it identifies an object that resembles the one they think it is, but it\u0026rsquo;s not actually the one they think it is.\nHere\u0026rsquo;s an example:\nI\u0026rsquo;ve seen a few reCAPTCHAs come up like this with one of those motorbikes that aren\u0026rsquo;t quite a full motorcycle (so they look bicycle-ish), but they are definitely NOT a bicycle. reCAPTCHA wants me to select the bicycle. I can\u0026rsquo;t pick \u0026ldquo;nothing\u0026rdquo;, because it \u0026ldquo;knows\u0026rdquo; there\u0026rsquo;s a bicycle in there (and skipping doesn\u0026rsquo;t teach it otherwise); But if I pick what it wants me to pick, I\u0026rsquo;m (incorrectly) reinforcing that this thing (that\u0026rsquo;s not a bicycle) is, in fact, a bicycle. And since the vast, vast majority of people don\u0026rsquo;t know that they\u0026rsquo;re training a LLM, they just pick the thing that Google wants them to pick so that they can move on with their lives.\nI guess what this means is that there might come a day when I can order an orange house cat using same-day delivery from a LLM-powered shopping app and subsequently be killed when I open the crate to find a Bengal tiger.\n","date":"February 15 2024","externalUrl":null,"permalink":"/posts/2024/02/orange-house-cat/","section":"Posts","summary":"There\u0026rsquo;s a weird edge case to using Large Language Models (LLMs) trained by humans that I\u0026rsquo;ve seen come up in Google\u0026rsquo;s reCAPTCHA: Sometimes it identifies an object that resembles the one they think it is, but it\u0026rsquo;s not actually the one they think it is.","title":"Orange House Cat","type":"posts"},{"content":"","date":"August 29 2022","externalUrl":null,"permalink":"/tags/death/","section":"Tags","summary":"","title":"Death","type":"tags"},{"content":"","date":"August 29 2022","externalUrl":null,"permalink":"/tags/movies/","section":"Tags","summary":"","title":"Movies","type":"tags"},{"content":"","date":"August 29 2022","externalUrl":null,"permalink":"/tags/sin/","section":"Tags","summary":"","title":"Sin","type":"tags"},{"content":"Spoilers.\nThoughts # There is a scene near the climax of this film that stood out to me about the distorting nature of sin.\nSetting The Scene # Sparma (Jared Leto), the prime suspect, has offered to drive Jim (Rami Malek) alone to the location of the missing woman\u0026rsquo;s body. Haggard from staying up all night, Jim accepts.\nCleaning Up # Upon arriving at the empty field, Sparma plays \u0026ldquo;hot/cold\u0026rdquo; with Jim and tells him that he should start digging. After some time spent digging, Sparma begins to taunt Jim by questioning his ability to protect his wife and daughters. In a moment of rage, Jim hits Sparma with the shovel, killing him instantly. As he sits alone in the field, horrified at what he has done, Deacon (Denzel Washington) finally arrives.\nTrying to justify himself, Jim begins by saying, \u0026ldquo;It was him. That\u0026rsquo;s our boy. He as much as told me\u0026rdquo;. Deacon replies, \u0026ldquo;Nothing you can do about it now\u0026rdquo;, and tells Jim to put Sparma in one of the dozen holes surrounding them. He leaves to take care of Sparma\u0026rsquo;s apartment (i.e., search for evidence). Several hours later, he returns to find Jim surrounded by dozens of new holes. Sparma\u0026rsquo;s body remains out in the open.\nAfter burying Sparma himself, Deacon gazes out on the now-filled holes. He turns to find Jim staring into space. Coaching him, Deacon says, \u0026ldquo;He\u0026rsquo;s dead. He\u0026rsquo;s forgotten. He\u0026rsquo;s rotting in the ground, and the only way he\u0026rsquo;s gonna come back is if you let him come back.\u0026rdquo;.\nWhere Are You? # This moment stood out to me and reminded me of Genesis 3:8:\nAnd they heard the sound of the LORD God walking in the garden in the cool of the day, and the man and his wife hid themselves from the presence of the LORD God among the trees of the garden.\nThe God they had known from the beginning was looking for them. And they hid from Him.\nYes, Sparma is dead. Yes, he\u0026rsquo;s buried. And, yes, it\u0026rsquo;s unlikely that anyone would ever find his body in \u0026ldquo;a hole at least 4-feet deep\u0026rdquo; in the middle of nowhere. But he\u0026rsquo;s not forgotten. God knows exactly where that body is. He knows where all ouf our sin is, even when we bury it 4-feet deep. And our attempts at hiding it are laughable in contrast.\nAbsolution # The closing scene of the movie shows Deacon having sent Jim a package containing a red barrette. This barrette was the same kind the missing woman had often worn. Jim appears relieved, now able to live without guilt. We then see Deacon burning all Sparma\u0026rsquo;s personal effects, including an empty container. (Context: Deacon had found this container hidden under the floorboards in Sparma\u0026rsquo;s apartment. The movie implied that it would\u0026rsquo;ve contained evidence of Sparma\u0026rsquo;s guilt, had he been the killer).\nConclusion # You could make parallels between Jesus\u0026rsquo; saving work and Deacon\u0026rsquo;s \u0026ldquo;absolution\u0026rdquo; of Jim. But they\u0026rsquo;re fleeting when we leave the film, as we realize there isn\u0026rsquo;t any certainty in it. Was Sparma responsible? Did he commit the crimes, but discard any evidence? Or will the newly-commissioned FBI investigation find the real killer? In either case, Jim may have had his guilt assuaged, but the evidence of his crime is still out there. And it\u0026rsquo;s ready to come back to life at a moment\u0026rsquo;s notice.\nThe reality is that there is only one person who can actually absolve us of our sins: Christ.\nWe know that our old self was crucified with him in order that the body of sin might be brought to nothing, so that we would no longer be enslaved to sin. For one who has died has been set free from sin. Now if we have died with Christ, we believe that we will also live with him.\nWe know that Christ, being raised from the dead, will never die again; death no longer has dominion over him. For the death he died he died to sin, once for all, but the life he lives he lives to God. So you also must consider yourselves dead to sin and alive to God in Christ Jesus.\nâ€” Romans 6:7-11\n","date":"August 29 2022","externalUrl":null,"permalink":"/theos/2022/08/the-little-things/","section":"Theos","summary":"Spoilers.","title":"The Little Things","type":"theos"},{"content":"","date":"August 29 2022","externalUrl":null,"permalink":"/theos/","section":"Theos","summary":"","title":"Theos","type":"theos"},{"content":"","date":"August 29 2022","externalUrl":null,"permalink":"/categories/theos/","section":"Categories","summary":"","title":"Theos","type":"categories"},{"content":"","date":"August 28 2022","externalUrl":null,"permalink":"/reviews/","section":"Reviews","summary":"","title":"Reviews","type":"reviews"},{"content":"","date":"August 28 2022","externalUrl":null,"permalink":"/categories/reviews/","section":"Categories","summary":"","title":"Reviews","type":"categories"},{"content":" Story # The Little Things reminds me of two (2) other things I\u0026rsquo;ve seen: David Fincher\u0026rsquo;s 1995 classic Seven (SE7EN) and season 1 of True Detective. While this film shares several plot elements that occur in both, what it does differently is how brazenly the primary suspect interacts with the detectives following him.\nTowards the end of the the film, I was concerned that it might end up just cribbing directly from Seven, but I was happy to see it went it\u0026rsquo;s own way. The ambiguity of the ending made for a very interesting, albeit slightly unsatisfying, conclusion.\nSight # The visuals were ambiguous and underwhelming. I think it would\u0026rsquo;ve benefited from a stronger atmosphere (I had actually mistakenly thought the plot took place during the 70s and didn\u0026rsquo;t really see much that would\u0026rsquo;ve said otherwise).\nI go back and forth on Jared Leto. I thought he was excellent in Lord of War, Mr. Nobody, and The Outsider. Yet, I found him incredibly offputting and pretentious in The Suicide Squad and Morbius (Note: I didn\u0026rsquo;t bother to watch the latter as a result of the trailer). And here in The Little Things, I found myself enjoying his portrayal above the others. Of particular note was the way he walks in the movie. There\u0026rsquo;s just something off that he brings to the character that comes through in such a great way.\nDenzel, for his part, is excellent (albeit a big reminiscence of his character in The Equalizer) and brings through the haunted past of his character. Rami was a bit clunky in the first act; I actually wasn\u0026rsquo;t sure about his role, but it smoothed out as the story progressed.\nSound # The soundtrack really stood out to me and provided a major boost to the story for me. Most movies in this genre seem to have heavy, tonal soundtracks, but the light yet slow cadence of the score stood out to me as a major positive.\nConclusion # I generally enjoyed this, and while I wouldn\u0026rsquo;t want a sequel \u0026ndash; there\u0026rsquo;s nowhere left to go with the story without wrecking the conclusion of this one \u0026ndash; I found the performances good enough that I would watch it again.\nRating # â˜…â˜…\n","date":"August 28 2022","externalUrl":null,"permalink":"/reviews/2022/08/the-little-things/","section":"Reviews","summary":"Story # The Little Things reminds me of two (2) other things I\u0026rsquo;ve seen: David Fincher\u0026rsquo;s 1995 classic Seven (SE7EN) and season 1 of True Detective.","title":"The Little Things","type":"reviews"},{"content":"","date":"August 28 2022","externalUrl":null,"permalink":"/tags/thriller/","section":"Tags","summary":"","title":"Thriller","type":"tags"},{"content":"","date":"August 26 2022","externalUrl":null,"permalink":"/tags/albums/","section":"Tags","summary":"","title":"Albums","type":"tags"},{"content":" Intro # Betraying The Archetype\u0026rsquo;s Terminate Damnation was one of the first Christian \u0026ldquo;death metal\u0026rdquo; albums I had ever listened to when it came out in 2005. The mixture of Jason Wisdom\u0026rsquo;s growls, solid theological lyrics and the classical guitar/piano reprieve partway through made it one of my favorite albums in the genre. Fast-forward to today where we have a new album called Children of the Great Extinction.\nReview # The Artwork # BTA\u0026rsquo;s album art has always been great, being done by Dan Seagrave\" . This album is no exception (as you can see above).\nThe Story # This release seems to be a concept album centered around a sci-fi story of explorers lost on a planet far from home. The lyrics themselves, however, could hint at deeper theological meaning:\n\u0026ldquo;This world was dead from the start\u0026rdquo; - The Dead World\n\u0026ldquo;Twelve were selected, chosen for the journey\u0026rdquo; - The Lost Colony\n\u0026ldquo;This world is hollow\u0026rdquo; - The Hollow\nThat being said, it\u0026rsquo;s possible that I\u0026rsquo;m simply reading into the lyrics, given the bands history and my personal beliefs; And while I\u0026rsquo;m not so boring as to think that Christians can\u0026rsquo;t create things that aren\u0026rsquo;t directly related to theology, it is certainly fun when hard sci-fi (which I love) can act as a metaphor for deeper things.\nThe Music # This album is a bit of a mixture of each of their previous albums. The Phantom Field and The Curse both harken back to Terminate Damnation. The Lost Colony and The Calling feel closer to their Dichotomy (2008) and Celestial Completion (2010) albums.\nHighlights:\nThe Calling (4) The Phantom Field (5) The Sacrament (10) Rating # â˜…â˜…â˜…\nListen # ","date":"August 26 2022","externalUrl":null,"permalink":"/reviews/2022/08/children-of-the-great-extinction/","section":"Reviews","summary":"Intro # Betraying The Archetype\u0026rsquo;s Terminate Damnation was one of the first Christian \u0026ldquo;death metal\u0026rdquo; albums I had ever listened to when it came out in 2005.","title":"Children of the Great Extinction","type":"reviews"},{"content":"","date":"August 26 2022","externalUrl":null,"permalink":"/tags/metal/","section":"Tags","summary":"","title":"Metal","type":"tags"},{"content":"","date":"August 26 2022","externalUrl":null,"permalink":"/tags/music/","section":"Tags","summary":"","title":"Music","type":"tags"},{"content":"Started Reading\n","date":"August 25 2022","externalUrl":null,"permalink":"/updates/2022/08/26/behind-closed-doors/","section":"Updates","summary":"Started Reading","title":"Behind Closed Doors","type":"updates"},{"content":"","date":"August 25 2022","externalUrl":null,"permalink":"/tags/books/","section":"Tags","summary":"","title":"Books","type":"tags"},{"content":"","date":"August 25 2022","externalUrl":null,"permalink":"/tags/management/","section":"Tags","summary":"","title":"Management","type":"tags"},{"content":"","date":"August 25 2022","externalUrl":null,"permalink":"/updates/","section":"Updates","summary":"","title":"Updates","type":"updates"},{"content":"","date":"August 25 2022","externalUrl":null,"permalink":"/categories/updates/","section":"Categories","summary":"","title":"Updates","type":"categories"},{"content":"All is new (again).\n","date":"August 25 2022","externalUrl":null,"permalink":"/posts/2022/08/init/","section":"Posts","summary":"All is new (again).","title":"Init","type":"posts"},{"content":"","date":"December 18 2020","externalUrl":null,"permalink":"/tags/coffee/","section":"Tags","summary":"","title":"Coffee","type":"tags"},{"content":"I really didn\u0026rsquo;t care for coffee until my 20s. I can\u0026rsquo;t recall whether or not I had had any prior to that, but I now realize that I didn\u0026rsquo;t really have any after that either; It was mostly just milk and sugar. In fact, it wasn\u0026rsquo;t until I was in my 30s that I enjoyed a cup of black coffee.\nI love the taste of coffee, which is why I drown each and every cup with milk and sugar.\nCold Brew # My real coffee journey started with the realization that I was spending way too much money at coffee shops. While Idaho has a (surprisingly) large number of drive-thru coffee stands, even the cheapest (Dutch Bros ) is still $5 for a basic flavored-coffee. The desire to cut my spending + the discovery of \u0026ldquo;nitro cold brew\u0026rdquo; led me to an article on Reddit outlining methods for making cold brew at home.\nThe idea of cold brew, in particular, was appealing to me because it meant I could make large batches of coffee overnight. I began buying beans on Amazon, grinding them (in what I now know to have effectively been a food processor), and brewing in Â½ gallon Mason jars. 24-hours later I could pour myself cup after cup until I ran out and would start the process anew.\nOne of the benefits of cold brew is the fact that the cold extraction process makes it less acidic and also less prone to the \u0026ldquo;coffee mouth\u0026rdquo; that comes after drinking a cup. The issue I quickly ran into, however, was that I found was that while it wasn\u0026rsquo;t as bitter, it didn\u0026rsquo;t really have much flavor by itself. There were some batches that were particularly good, but the majority were \u0026ldquo;meh\u0026rdquo; and I would end up adding creamer to compensate. Back to the drawing board.\nI started experimenting with different brew parameters, including adjusting the brew time, grind settings, bean roast levels, and temperatures. I also started investing in more and better equipment. The biggest change came with switching from a blade \u0026ldquo;grinder\u0026rdquo; to a conical burr grinder (I\u0026rsquo;m pretty sure it\u0026rsquo;s also free-range, and organic). A blade grinder is basIcally a mini-food processor and chops at the beans until you tell it to stop. Because the beans never leave the container, the grind is rarely (if ever) consistent. Switching to a pass-through, conical burr grinder made the grinds much more consistent.\nPour-Over # It was also around this time that I began experimenting with pour-over. Pour-over, as one might imagine, involves pouring hot water over the grounds and is basically what any automatic brewer does (albeit in a much more controlled manner). Without getting into too much detail, the process involves pre-warming/wetting a filter in the dripper and then pouring the hot water over the grounds which percolates into a waiting mug or carafe.\nThe first dripper I bought was a variation of this one and it was\u0026hellip; not good. The main issues I encountered with it were:\nThe bottom of the cone didn\u0026rsquo;t always fit into my mugs. It was made of plastic (very hot liquid + plastic isn\u0026rsquo;t ideal). Plastic doesn\u0026rsquo;t really pre-warm. After struggling with the basic plastic one, I moved on to a glass dripper (Kalita Wave ). While it was much better, It required a much courser grind setting due to how slowly the water dripped. In addition, due to it\u0026rsquo;s flat bottom, the filters it uses are basket-style and can cause grounds to \u0026ldquo;stick\u0026rdquo; in the folds. This meant I had to fish them out with a spoon during the brew. Bad news.\nStill Not A Pro # This leads me to where I am today: I brew with a Hario V60 , a very popular dripper. It brews quickly, has conical filters, and works with a wide variety of accessories. I also use the Barista ) iOS app to time my brews. I now really enjoy my morning (and mid-morning, and afternoon, and\u0026hellip;) cup of coffee and I drink it black. I still occasionally opt for creamer, but it\u0026rsquo;s a pretty rare event.\nHere are some resources I recommend:\nJames Hoffmann YouTube Channel Reddit /r/coffee Wiki ","date":"December 18 2020","externalUrl":null,"permalink":"/posts/2020/12/coffee/","section":"Posts","summary":"I really didn\u0026rsquo;t care for coffee until my 20s.","title":"Coffee","type":"posts"},{"content":"","date":"December 10 2020","externalUrl":null,"permalink":"/tags/clean-code/","section":"Tags","summary":"","title":"Clean-Code","type":"tags"},{"content":"It\u0026rsquo;s not at all uncommon to open a code repo and find the following commit messages:\nversion bump\nfixed a bug\nthis works now\nThese are fine commit messages, but only for one person and at one point in time: the committer and the 5-minute period following the creation of the commit.\nAnyone needing to find the source of a change outside of that small window, including said person, is going to have a real tough time. How many commits titled \u0026ldquo;version bump\u0026rdquo; are there? What version is it going to? What library are we even bumping the version of? These are all questions some future developers may have to ask because of a poorly-chosen commit message.\nTell A Story # Commits, like the code they describe, should tell the story of the repository. The following is an example of the type of detail a repository story (Reposistory? â„¢!!!) will tell:\n01/02/2020: 'Sample Project' was set up\n01/02/2020: project was renamed to 'The Next Next Facebook'\n01/05/2020: 'Carbon' date library was installed\n01/07/2020: ability to 'Like' comments was added\n01/14/2020: database settings were switched to 'PostgreSQL'\n01/14/2020: Redis caching was enabled on production only\n01/15/2020: homepage logo was added\n01/18/2020: Feed will now autoload new comments\nIf we contrast that against what a lot of repositories look like, the \u0026ldquo;story\u0026rdquo; gets considerably less clear:\n01/02/2020: init\n01/02/2020: rename app\n01/05/2020: install lib\n01/07/2020: add comment likes\n01/14/2020: switch db\n01/14/2020: add caching\n01/15/2020: new logo\n01/18/2020: autoload comments\nA lot of detail is lost when telling the story this way; detail that can be important.\nTrouble # Say it\u0026rsquo;s been two weeks since the \u0026ldquo;add comment likes\u0026rdquo; commit was created. One of our new developers is handed a task to investigate reports of an issue over the past few weeks where comment Likes are not updating. Inquiring further, they find that the issue occurs not on the feed, but on the user profile page. They are able to replicate the issue but aren\u0026rsquo;t familiar enough with the code so they decide to review what\u0026rsquo;s changed in the past few weeks. Loading up our example \u0026ldquo;bad\u0026rdquo; commit log, they see a few possibilities:\nPerhaps it could be an issue with the new autoloading comments feature. Perhaps something changed that caused new comment likes to not be stored in the database. Perhaps the database is being used as the cache and comment \u0026ldquo;Likes\u0026rdquo; are not being cached properly. Our developer decides that the easiest one to rule out is the database. They load up a copy of pgAdmin and check the comments table. There are new comments from the past few minutes so possibility #2 has been ruled out. Our developer then checks for a cache table but doesn\u0026rsquo;t find one. Possibility #3 has also been ruled out.\nStill suspecting a caching issue, the developer decides to find out how caching is being done. They discover Redis is the caching engine and dive into the code. The comment Likes appear to have been cached under a different tag than the comments themselves and using different settings. The cache expiry for Comment Likes on the User Profile was (seemingly mistakenly) set for 60-days in the future instead of 60-minutes. Whoops!\nDetail # Going back to our commit message examples we can see a few things right away. The first is that the \u0026ldquo;good\u0026rdquo; commit messages give our developer a lot more with which to work. It would\u0026rsquo;ve told them that a) Redis was the caching engine (ruling out Possibility #3) and b) the new autoloading feature (Possibility #1) only applied to the Feed, not the Profile page where the issue was reported. The environment that Redis was being used on might also have been something helpful that could be discerned from reading the commit messages.\nAll of this knowledge could narrow down the scope of the investigation without much effort being required of the committer.\nGood Storytelling # As with any skill that\u0026rsquo;s worth doing, being a good storyteller takes time, effort, and practice. Let\u0026rsquo;s dive into some starting points for telling a good reposi-story.\nBe Specific # As we learned in our example above, being specific about what changed can be hugely helpful in finding changes weeks, months, or even years later.\nWhat version was the library updated to? Update Carbon library to 2.0.1 What caching engine was installed? Create 'Memcached' cache Docker container What was the memory limit raised to? Double Pipelines memory limit to 1024MB What library is being removed? Remove MomentJS Which developer\u0026rsquo;s key is being added? Add Goldie Wilson ssh key Use Present-Tense, Active Verbs # There is an adage that I heard early in my career that I encourage everyone to follow: Use present-tense, active verbs to complete the following sentence when composing commit messages: \u0026ldquo;Merging this code will\u0026hellip;\u0026rdquo;\nMerging this code will\u0026hellip; _Update_ the company logo to the 2020 version Merging this code will\u0026hellip; _Add_ a new table for phone number verification status Merging this code will\u0026hellip; _Remove_ support for TLS 1.0 Thinking about completing that sentence helps commit messages to be clear and concise.\nBreak It Up # This one will easily be the most difficult for some people. Chunking your work into bite-sized commits is not easy to do when you\u0026rsquo;re working on a long-running feature or refactoring an old one. We\u0026rsquo;ve all been there when you\u0026rsquo;ve worked hard to get your code clean, tests passing, and just want to be done. The temptation is to just throw all of your work into one big commit and push it out. After all, nobody needs to know why you touched all of these files and hardly anyone reads them, right?\nWhile certainly tempting, it can cause a couple of issues:\nIt makes it more difficult to back out specific changes if needed. Knowing that backing out one slice of work will also take out three others makes more urgent changes difficult. If you\u0026rsquo;re following the principles for writing good messages, it can force you to write really long commit messages (e.g. Added a new table for phone number verification and added a new controller for phone number management and ...). This also makes it harder to parse when looking through the log. Breaking your commits up forces you to think of how changes relate to one another and which things fit with other things. To make this easier, a number of GUI-based code versioning clients (including GitKraken ) allow you to select only specific chunks when committing.\nChange Log # The final benefit of writing good commit messages that I want to cover is the changelog. When telling a story well, the git log can often be turned into (or at least act as a starting point for) your product changelog. Imagine being asked for the list of changes that will be released this week and finding the following commits from before in the commit log:\n01/02/2020: rename app\n01/05/2020: install lib\n01/07/2020: add comment likes\n01/14/2020: switch db\n01/14/2020: add caching\n01/15/2020: new logo\n01/18/2020: autoload comments\nAs changes often go beyond product requirements, lacking good commit messages will cause you to have to manually chase down each and every change that has occurred since the last release. With our storytelling commit messages, we could easily come up with something like this:\nWe have a new name! Generic Product is now The Next Next Facebook! Displaying Dates in The Next Next Facebook is now even easier. They comment on it, you like it. You can now Like Comments! The Database has been upgraded and performance will be even faster! You\u0026rsquo;ll now see our new logo on the homepage! The person reading through the commit log doesn\u0026rsquo;t even need to be someone technical if the story that is told is told well.\nCaveats # CI/CD # A story was told recently by David Bernstein at the Pragmatic Programmer Conference In The Cloud 2020\" event about a company in Seattle. During a tour of said company, they came upon the main developer area where there sat in the corner a large box. When asked what the box was, the guide responded something like this: \u0026ldquo;That is the build server. See those lights and sirens all around the ceiling? Those go off when someone breaks the build. You don\u0026rsquo;t want to be the one who breaks the build.\u0026rdquo;\nIf your team has a CI/CD build pipeline with a single branch, you may not want to be the one who breaks it. If that is the case, you may have to think more carefully about how you break down your commits. This could especially be the case if you were working on a feature/bug that took a larger amount of time. Without knowing the specifics of your situation, I would still encourage you to break down your commits as best you can in a way that doesn\u0026rsquo;t break the build.\nSquashed Commits # Some teams either automatically, or require developers to manually, squash their commits as they merge them. This might cause some to question the value of writing thorough commit messages when there\u0026rsquo;s the possibility it could be lost during a squash. Commit messages can be condensed when performing a squash, but that\u0026rsquo;s outside the scope of this article.\nSome hosted VCS services (e.g. Bitbucket) will also auto condense your commit messages into a single commit with the full list of messages attached. But even if that were not the case, I would still recommend you practice good commit message etiquette. Clear commit messages can be helpful during code reviews. You also never know when a branch may go stale, or you just need to find a specific change quickly.\nBe Committed # I know it\u0026rsquo;s not always easy, and I myself struggle with the above tips from time to time. We all tell a story with our commits. What will yours be?\n","date":"December 10 2020","externalUrl":null,"permalink":"/posts/2020/12/committed/","section":"Posts","summary":"\u003cp\u003eIt\u0026rsquo;s not at all uncommon to open a code repo and find the following commit messages:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eversion bump\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003efixed a bug\u003c/code\u003e\u003cbr\u003e\n\u003ccode\u003ethis works now\u003c/code\u003e\u003cbr\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThese are fine commit messages, but only for one person and at one point in time: the committer and the 5-minute period following the creation of the commit.\u003c/p\u003e","title":"Committed","type":"posts"},{"content":"","date":"December 10 2020","externalUrl":null,"permalink":"/tags/software/","section":"Tags","summary":"","title":"Software","type":"tags"},{"content":"","date":"December 10 2020","externalUrl":null,"permalink":"/tags/version-control/","section":"Tags","summary":"","title":"Version-Control","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]